#include <bits/stdc++.h>
#define endl '\n'
#define strim stringstream
#define ll long long int
#define inf INT_MAX
#define negInf INT_MIN
#define mod %
#define find_array_max *max_element(arr.begin(), arr.end());
#define find_array_min *min_element(arr.begin(), arr.end());
#define pii pair<Node *, int>
#define pll pair<ll, ll>
#define left_range(i, x, y) for (int i = x; i <= y; i++)
#define right_range(i, x, y) for (int i = y; i >= x; i--)
void hey_output()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
}
using namespace std;
const int N = 1e5 + 7;
class Node
{
public:
    int val;
    Node *left;
    Node *right;
    Node(int val)
    {
        this->val = val;
        this->left = NULL;
        this->right = NULL;
    }
};
Node *input()
{
    int val;
    cin >> val;
    Node *root;
    if (val == -1)
        return nullptr;
    else
        root = new Node(val);
    queue<Node *> q;
    if (root != nullptr)
    {
        q.push(root);
    }
    while (!q.empty())
    {
        Node *f = q.front();
        q.pop();
        int l, r;
        cin >> l >> r;
        Node *new_left;
        Node *new_right;
        if (l == -1)
            new_left = nullptr;
        else
            new_left = new Node(l);
        if (r == -1)
            new_right = nullptr;
        else
            new_right = new Node(r);
        f->left = new_left;
        f->right = new_right;

        if (f->left != nullptr)
            q.push(f->left);
        if (f->right != nullptr)
            q.push(f->right);
    }
    return root;
}

void in(Node *root)
{
    queue<pii> q;
    q.push({root, 0});

    while (!q.empty())
    {
        pii f = q.front();
        q.pop();
        Node *my_f = f.first;
        int curlevel = f.second;

        cout << my_f->val << " ";
        cout << curlevel << " ";
        cout << endl;

        if (my_f->left != nullptr)
            q.push({my_f->left, curlevel + 1});
        if (my_f->right != nullptr)
            q.push({my_f->right, curlevel + 1});
    }

    // return root;
}
void go_on()
{
    Node *root = input();

    in(root);
}

int32_t main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    // hey_output();
    ll t = 1;
    // cin >> t;
    while (t--)
    {
        go_on();
    }

    return 0;
}
