#include <bits/stdc++.h>
#define endl '\n'
#define strim stringstream
#define ll long long int
#define inf INT_MAX
#define negInf INT_MIN
#define mod %
#define find_array_max *max_element(arr.begin(), arr.end());
#define find_array_min *min_element(arr.begin(), arr.end());
#define pii pair<int, int>
#define pll pair<ll, ll>
#define left_range(i, x, y) for (int i = x; i <= y; i++)
#define right_range(i, x, y) for (int i = y; i >= x; i--)
void hey_output()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
}
using namespace std;
const int N = 1e5 + 7;
class Node
{

public:
    int val;
    Node *left;
    Node *right;
    Node(int val)
    {
        this->val = val;
        this->left = nullptr;
        this->right = nullptr;
    }
};
// pre-order travarsal start
void preOrder(Node *root)
{
    if (root == nullptr)
        return;
    cout << root->val << " ";
    /*not only print, we can everything in this place*/
    preOrder(root->left);
    preOrder(root->right);
}
// pre-order travarsal end

// post order start
void postOrder(Node *root)
{

    if (root == nullptr)
        return;
    postOrder(root->left);
    postOrder(root->right);
    /*not only print, we can everything in this place*/
    cout << root->val << " ";
}
// post order end

// inorder travarsal start
void inOrder(Node *root)
{
    if (root == nullptr)
        return;
    inOrder(root->left);
    cout << root->val << " ";
    /*not only print, we can everything in this place*/
    inOrder(root->right);
}
// inorder travarsal end

static void go_on()
{

    // Node manual creat
    Node *root = new Node(10);
    Node *a = new Node(20);
    Node *b = new Node(30);
    Node *c = new Node(40);
    Node *d = new Node(50);
    Node *e = new Node(60);
    Node *f = new Node(70);
    Node *g = new Node(80);
    Node *h = new Node(90);
    Node *i = new Node(100);
    // Node manual create

    // Node manual connect start
    root->left = a;
    root->right = b;
    a->left = c;
    a->right = h;
    c->right = e;
    b->right = d;
    d->left = f;
    d->right = g;
    h->right = i;

    // Node manual connect end
    preOrder(root);
    cout << endl;
    postOrder(root);
    cout << endl;
    inOrder(root);
}

int32_t main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    // hey_output();
    go_on();

    return 0;
}
